// Generated by CIRCT firtool-1.62.0
module test(
  input         clock,
                reset,
  input  [7:0]  io_mul1,
                io_mul2,
  output [15:0] io_res,
  output        io_out
);

  reg  [2:0]  stateReg;
  reg  [15:0] numReg;
  wire        _io_out_T = stateReg == 3'h4;
  always @(posedge clock) begin
    if (reset) begin
      stateReg <= 3'h0;
      numReg <= 16'h0;
    end
    else begin
      automatic logic [7:0][7:0] _GEN =
        {{8'h0},
         {8'h0},
         {8'h0},
         {{5'h0, io_mul2[1:0], 1'h0}},
         {{5'h0, io_mul2[7:5]}},
         {{5'h0, io_mul2[5:3]}},
         {{5'h0, io_mul2[3:1]}},
         {{5'h0, io_mul2[1:0], 1'h0}}};
      automatic logic [7:0]      temp;
      automatic logic [7:0][2:0] _GEN_0 =
        {{stateReg}, {stateReg}, {stateReg}, {3'h0}, {3'h4}, {3'h3}, {3'h2}, {3'h1}};
      temp = _GEN[stateReg];
      stateReg <= _GEN_0[stateReg];
      if (~(temp == 8'h0 | temp == 8'h7)) begin
        if (temp == 8'h1 | temp == 8'h2) begin
          automatic logic [46:0] _numReg_T_10 =
            {31'h0, numReg + {{8{io_mul1[7]}}, io_mul1}}
            << {43'h0, stateReg - 3'h1, 1'h0};
          numReg <= _numReg_T_10[15:0];
        end
        else if (temp == 8'h3) begin
          automatic logic [46:0] _numReg_T_21 =
            {31'h0, numReg + {{8{io_mul1[7]}}, io_mul1}} << {1'h0, stateReg - 3'h1, 1'h0}
            + 5'h1;
          numReg <= _numReg_T_21[15:0];
        end
        else if (temp == 8'h4) begin
          automatic logic [46:0] _numReg_T_32 =
            {31'h0, numReg - {{8{io_mul1[7]}}, io_mul1}} << {1'h0, stateReg - 3'h1, 1'h0}
            + 5'h1;
          numReg <= _numReg_T_32[15:0];
        end
        else if (temp == 8'h5 | temp == 8'h6) begin
          automatic logic [46:0] _numReg_T_41 =
            {31'h0, numReg - {{8{io_mul1[7]}}, io_mul1}}
            << {43'h0, stateReg - 3'h1, 1'h0};
          numReg <= _numReg_T_41[15:0];
        end
        else if (stateReg == 3'h0 | stateReg == 3'h1 | stateReg == 3'h2 | stateReg == 3'h3
                 | stateReg != 3'h4) begin
        end
        else
          numReg <= 16'h0;
      end
    end
  end // always @(posedge)
  assign io_res = _io_out_T ? numReg : 16'h0;
  assign io_out = _io_out_T & numReg[0];
endmodule

