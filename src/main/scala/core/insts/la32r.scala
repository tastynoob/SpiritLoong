package core.insts

import chisel3._
import chisel3.util._

object LA32RInsts {
    // alu
    val ADD_W     = BitPat("b00000000000100000???????????????")
    val ADDI_W    = BitPat("b0000001010??????????????????????")
    val SUB_W     = BitPat("b00000000000100010???????????????")
    val ALSL_W    = BitPat("b000000000000010?????????????????")
    val LU12I_W   = BitPat("b0001010?????????????????????????")
    val SLT       = BitPat("b00000000000100100???????????????")
    val SLTU      = BitPat("b00000000000100101???????????????")
    val SLTI      = BitPat("b0000001000??????????????????????")
    val SLTUI     = BitPat("b0000001001??????????????????????")
    val PCADDI    = BitPat("b0001100?????????????????????????")
    val PCADDU12I = BitPat("b0001110?????????????????????????")
    val PCALAU12I = BitPat("b0001101?????????????????????????")
    val AND       = BitPat("b00000000000101001???????????????")
    val OR        = BitPat("b00000000000101010???????????????")
    val NOR       = BitPat("b00000000000101000???????????????")
    val XOR       = BitPat("b00000000000101011???????????????")
    val ANDN      = BitPat("b00000000000101101???????????????")
    val ORN       = BitPat("b00000000000101100???????????????")
    val ANDI      = BitPat("b0000001101??????????????????????")
    val ORI       = BitPat("b0000001110??????????????????????")
    val XORI      = BitPat("b0000001111??????????????????????")
    val SLL_W     = BitPat("b00000000001000011???????????????")
    val SRL_W     = BitPat("b00000000000101111???????????????")
    val SRA_W     = BitPat("b00000000000110000???????????????")
    val ROTR_W    = BitPat("b00000000000110110???????????????")
    val SLLI_W    = BitPat("b00000000010000001???????????????")
    val SRLI_W    = BitPat("b00000000010001001???????????????")
    val SRAI_W    = BitPat("b00000000010010001???????????????")
    val ROTRI_W   = BitPat("b00000000010011001???????????????")

    // mdu
    val MUL_W   = BitPat("b00000000000111000???????????????")
    val MULH_W  = BitPat("b00000000000111001???????????????")
    val MULH_WU = BitPat("b00000000000111010???????????????")
    val DIV_W   = BitPat("b00000000001000000???????????????")
    val MOD_W   = BitPat("b00000000001000001???????????????")
    val DIV_WU  = BitPat("b00000000001000010???????????????")
    val MOD_WU  = BitPat("b00000000001000011???????????????")

    // bit
    val EXT_W_B    = BitPat("b0000000000000000010111??????????")
    val EXT_W_H    = BitPat("b0000000000000000010110??????????")
    val CLO_W      = BitPat("b0000000000000000000100??????????")
    val CLZ_W      = BitPat("b0000000000000000000101??????????")
    val CTO_W      = BitPat("b0000000000000000000110??????????")
    val CTZ_W      = BitPat("b0000000000000000000111??????????")
    val BYTEPICK_W = BitPat("b000000000000100?????????????????")
    val REVB_2H    = BitPat("b0000000000000000001100??????????")
    val BITREV_4B  = BitPat("b0000000000000000010010??????????")
    val BITREV_W   = BitPat("b0000000000000000010100??????????")
    val BSTRINS_W  = BitPat("b00000000011?????0???????????????")
    val BSTRPICK_W = BitPat("b00000000011?????1???????????????")
    val MASKEQZ    = BitPat("b00000000000100110???????????????")
    val MASKNEZ    = BitPat("b00000000000100111???????????????")
    // branch
    val BEQ        = BitPat("b010110??????????????????????????")
    val BNE        = BitPat("b010111??????????????????????????")
    val BLT        = BitPat("b011000??????????????????????????")
    val BGE        = BitPat("b011001??????????????????????????")
    val BLTU       = BitPat("b011010??????????????????????????")
    val BGEU       = BitPat("b011011??????????????????????????")
    val BEQZ       = BitPat("b010000??????????????????????????")
    val BNEZ       = BitPat("b010001??????????????????????????")
    val B          = BitPat("b010100??????????????????????????")
    val BL         = BitPat("b010101??????????????????????????")
    val JIRL       = BitPat("b010011??????????????????????????")
    // mem
    val LD_B       = BitPat("b0010100000??????????????????????")
    val LD_H       = BitPat("b0010100001??????????????????????")
    val LD_W       = BitPat("b0010100010??????????????????????")
    val LD_BU      = BitPat("b0010101000??????????????????????")
    val LD_HU      = BitPat("b0010101001??????????????????????")
    val ST_B       = BitPat("b0010100100??????????????????????")
    val ST_H       = BitPat("b0010100101??????????????????????")
    val ST_W       = BitPat("b0010100110??????????????????????")
    val PRELD      = BitPat("b0010101011??????????????????????")
}

object SrcType {
    def wid = 2.W
    def X   = 0.U(wid)
    def reg = 1.U(wid)
    def imm = 2.U(wid)
    def pc  = 3.U(wid)

    def apply() = UInt(wid)

    def isReg(x: UInt) = x === reg
    def isImm(x: UInt) = x === imm
    def isPC(x: UInt)  = x === pc
}

object OpType {
    def wid     = 3.W
    def X       = 0.U(wid)
    def alu     = 1.U(wid)
    def bru     = 2.U(wid)
    def mul     = 3.U(wid)
    def div     = 4.U(wid)
    def ldu     = 5.U(wid)
    def stu     = 6.U(wid)
    def apply() = UInt(wid)
}

object UOpType {
    def wid     = 6.W
    def apply() = UInt(6.W)
    def X       = 0.U(wid)
}

object ALUOpType {
    def wid        = 6.W

    def add_w      = 0.U(wid)
    def sub_w      = 1.U(wid)
    def alsl_w     = 2.U(wid)
    def lu12i_w    = 3.U(wid)
    def slt        = 4.U(wid)
    def sltu       = 5.U(wid)
    def and        = 6.U(wid)
    def or         = 7.U(wid)
    def nor        = 8.U(wid)
    def xor        = 9.U(wid)
    def andn       = 10.U(wid)
    def orn        = 11.U(wid)
    def sll_w      = 12.U(wid)
    def srl_w      = 13.U(wid)
    def sra_w      = 14.U(wid)
    def rotr_w     = 15.U(wid)
    def ext_w_b    = 16.U(wid)
    def ext_w_h    = 17.U(wid)
    def clo_w      = 18.U(wid)
    def clz_w      = 19.U(wid)
    def cto_w      = 20.U(wid)
    def ctz_w      = 21.U(wid)
    def bytepick_w = 22.U(wid)
    def revb_2h    = 23.U(wid)
    def revb_4b    = 24.U(wid)
    def bitrev_w   = 25.U(wid)
    def bstrins_w  = 26.U(wid)
    def bstrpick_w = 27.U(wid)
    def maskeqz    = 28.U(wid)
    def masknez    = 29.U(wid)
}

object BRUOpType {
    def wid       = 6.W
    def pcaddi    = 0.U(wid)
    def pcaddu12i = 1.U(wid)
    def pcalau12i = 2.U(wid)
    def beq       = 3.U(wid)
    def bne       = 4.U(wid)
    def blt       = 5.U(wid)
    def bge       = 6.U(wid)
    def bltu      = 7.U(wid)
    def bgeu      = 8.U(wid)
    def beqz      = 9.U(wid)
    def bnez      = 10.U(wid)
    def b         = 11.U(wid)
    def bl        = 12.U(wid)
    def jirl      = 13.U(wid)
}

object MDUOpType {
    def wid      = 6.W
    def mul_w    = 0.U(wid)
    def mulh_w   = 1.U(wid)
    def mulh_wu  = 2.U(wid)
    def div_w    = 3.U(wid)
    def mod_w    = 4.U(wid)
    def div_wu   = 5.U(wid)
    def mod_wu   = 6.U(wid)
}

object LDUOpType {
    def wid    = 6.W
    def ld_b   = 0.U(wid)
    def ld_h   = 1.U(wid)
    def ld_w   = 2.U(wid)
    def ld_bu  = 3.U(wid)
    def ld_hu  = 4.U(wid)
    def st_b   = 5.U(wid)
    def st_h   = 6.U(wid)
    def st_w   = 7.U(wid)
    def preld  = 8.U(wid)
}

object SelImm {
    def wid      = 4.W
    def X        = 0.U(wid)
    def IMM_SI12 = 1.U(wid)
    def IMM_UI12 = 2.U(wid)
    def IMM_SA2  = 3.U(wid)
    def IMM_SI20 = 4.U(wid)
    def IMM_UI5  = 5.U(wid)
    def IMM_OF16 = 6.U(wid)
    def IMM_OF21 = 7.U(wid)
    def IMM_OF26 = 8.U(wid)
    def IMM_MSLS = 9.U(wid) // special
    def DC       = 10.U(wid)

    def ImmMaxLen = 26

    def isDC(srcType: UInt) = srcType === DC

    def apply() = UInt(4.W)
}


object IMM_SI12 {
    def apply(code:UInt) = {
        code(21,10)
    }
}

object IMM_UI12 {
    def apply(code:UInt) = {
        IMM_SI12(code)
    }
}

object IMM_SA2 {
    def apply(code:UInt) = {
        code(16,15)
    }
}

object IMM_SI20 {
    def apply(code:UInt) = {
        code(24,5)
    }
}

object IMM_UI5 {
    def apply(code:UInt) = {
        code(14,10)
    }
}

object IMM_OF16 {
    def apply(code:UInt) = {
        code(25,10)
    }
}

object IMM_OF21 {
    def apply(code:UInt) = {
        Cat(code(4,0),code(25,10))
    }
}

case class IMM_OF26() {
    def apply(code:UInt) = {
        Cat(code(9,0), code(25,10))
    }
}
